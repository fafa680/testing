def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) { 
    flutterVersionCode = '4'
}

def releaseTime() {
  return new Date().format("yyyy-MM-dd HH:mm ZZZ", TimeZone.getDefault())
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0.3'
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.chrisney.enigma'
apply plugin: 'AndResGuard'
apply plugin: 'io.michaelrocks.paranoid'
apply plugin: 'idea'
enigma.enabled = true
enigma.injectFakeKeys = true
enigma.ignoredClasses = ["com.nini.fafa.MainActivity.kt"]
def keystoreProperties = new Properties()
   def keystorePropertiesFile = rootProject.file('key.properties')
   if (keystorePropertiesFile.exists()) {
       keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
   }
android {
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    compileSdkVersion 30
     ndkVersion "21.3.6528147"
     buildToolsVersion "30.0.3"
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.nini.fafa"
        minSdkVersion 18
        targetSdkVersion 30
        versionCode 4
        versionName "1.0.3"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resConfigs "en", "fr"
        }
        signingConfigs {
       release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
           storePassword keystoreProperties['storePassword']
       }
   }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
           zipAlignEnabled true
           pseudoLocalesEnabled true
            signingConfig signingConfigs.release
            ndk {
               debugSymbolLevel 'SYMBOL_TABLE'
            }
        }
        releaseLog {
      buildConfigField "boolean", "DEBUG_MODE", "false"
      buildConfigField "boolean", "LOG_DEBUG", "true"
      debuggable true
      minifyEnabled true
      zipAlignEnabled true
      shrinkResources false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), "proguard-rules.pro"
      signingConfig signingConfigs.release

      matchingFallbacks = ['release']
    }
    }
externalNativeBuild {
  cmake{
    version "3.10.2.4988404"
  }
}
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}
flutter {
    source '../..'
  }
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.3.0-alpha01'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.hover:android-sdk:1.6.5-noSMS'
}
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}
//here
  manifest {
    attributes 'Main-Class': 'com.tencent.mm.resourceproguard.cli.CliMain'
    attributes "Build-Time": releaseTime()
  }
task buildJar(type: Copy, dependsOn: [build]) {
  from('build/libs') {
    include '*' + version + '*.jar'
  }
  into('../tool_output')
}
andResGuard {
  mappingFile = file("./resource_mapping.txt")
  use7zip = true
  useSign = true
  keepRoot = false
  fixedResName = "arg"
  mergeDuplicatedRes = true
  whiteList = ["R.mipmap.ic_launcher",
               "R.id.*",
        "R.drawable.icon",
        "R.drawable.umeng*",
"R.drawable.sina*",
"R.drawable.qq_*",
"R.drawable.upsdk_*",
"R.drawable.hms_*",
"R.drawable.mobcommon*",
"R.drawable.ssdk*",
"R.drawable.push",
"R.drawable.push_small",
"R.drawable.jpush_notification_icon",
        "R.drawable.tb_*",
        "R.drawable.upsdk*",
        "R.string.google_app_id",
        "R.string.com.crashlytics.*",
        "R.string.gcm_defaultSenderId",
        "R.string.default_web_client_id",
        "R.string.ga_trackingId",
        "R.string.firebase_database_url",
        "R.string.google_api_key",
        "R.string.hms*",
"R.string.com.crashlytics.CollectUserIdentifiers",
"R.string.com.crashlytics.ApiEndpoint",
"R.string.com.crashlytics.CollectDeviceIdentifiers",
"R.string.io.fabric.android.build_id",
"R.string.com.crashlytics.useFirebaseAppId",
"R.string.com.crashlytics.android.build_id",
"R.string.mobcommon*",
"R.string.ssdk*",
"R.string.mobdemo*",
"R.string.com.crashlytics.RequireBuildId",
"R.string.com.crashlytics.CollectCustomLogs",
"R.string.com.crashlytics.Trace",
"R.string.com.crashlytics.CollectCustomKeys",
"R.string.hms_*",
"R.string.connect_server_fail_prompt_toast",
"R.string.getting_message_fail_prompt_toast",
"R.string.no_available_network_prompt_toast",
"R.string.third_app_*",
"R.string.upsdk_*",
"R.string.google_crash_reporting_api_key",
"R.string.growingio_project_id",
"R.string.growingio_url_scheme",
"R.string.growingio_channel",
"R.string.agc*",
"R.string.umeng*",
"R.string.UM*",
"R.string.tb_*",
        "R.layout.umeng*",
        "R.layout.tb_*",
        "R.color.umeng*",        
"R.layout.hms*",
"R.color.upsdk*",
"R.dimen.upsdk*",
"R.style.upsdk*", 
"R.anim.umeng*",
"R.layout.socialize_*",
"R.layout.*messager*",
"R.layout.tb_*",
"R.color.umeng*",
"R.color.tb_*",
"R.style.*UM*",
"R.style.umeng*",
"R.id.umeng*",
"R.id.*messager*",
"R.id.progress_bar_parent",
"R.id.socialize_*",
"R.id.webView",
"R.layout.getui_notification",
"R.style.upsdkDlDialog",
"R.style.AppTheme",
"R.style.AppBaseTheme",
"R.dimen.upsdk_dialog_*",
"R.color.upsdk_*",
"R.layout.upsdk_*",
"R.layout.hms_*",
"R.id.hms_*",
"R.bool.com.crashlytics.useFirebaseAppId",
"R.bool.com.crashlytics.CollectDeviceIdentifiers",
"R.bool.com.crashlytics.CollectUserIdentifiers",
"R.bool.com.crashlytics.RequireBuildId",
"R.bool.com.crashlytics.CollectCustomLogs",
"R.bool.com.crashlytics.Trace",
"R.id.ssdk*",
"R.layout.mob*",
"R.style.mobcommon*",
               ]
  compressFilePattern = ["*.png",
                         "*.jpg",
                         "*.jpeg",
                         "*.gif",
                         "resources.arsc"
                         ]
sevenzip{
  artifact = 'com.tencent.mm:SevenZip:1.2.20'
}
finalApkBackupPath = "${project.rootDir}/final.apk"
  digestalg = "SHA-256"
}

